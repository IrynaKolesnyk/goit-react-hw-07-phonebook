{"version":3,"sources":["components/ContactForm/ContactFormStyled.jsx","redux/phoneBook/contacts-selectors.jsx","redux/phoneBook/phoneBookActions.jsx","redux/phoneBook/contacts-operations.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListStyled.jsx","components/ContactList/ContactList.jsx","components/Filter/FilterStyled.jsx","components/Filter/Filter.jsx","App.js","redux/phoneBook/phoneBookReducer.jsx","redux/phoneBook/rootReducer.jsx","redux/store.jsx","index.js"],"names":["ContactFormStyled","styled","div","getContacts","state","items","getFilter","filter","getLoading","loading","getError","error","getVisibleContacts","createSelector","contacts","normalizedFilter","toLowerCase","contact","name","includes","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","getContactRequest","getContactSuccess","getContactError","changeFilter","payload","axios","defaults","baseURL","ContactForm","number","nameId","uuidv4","phoneId","handelInputChange","event","target","value","setState","handelFormSubmit","preventDefault","props","find","alert","onSubmit","className","this","type","pattern","title","required","onChange","autoComplete","id","Component","connect","dispatch","post","then","data","catch","addContact","ContactListStyled","ul","onDeleteContact","contactId","delete","map","onClick","FilterStyled","contactsActions","App","fetchContacts","isLoadingContacts","isError","mapDispatchToProps","get","createReducer","_","action","actions","setError","refreshError","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61f43683.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst ContactFormStyled = styled.div`\r\n  align-items: center;\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n  .form-label {\r\n    display: block;\r\n    margin-bottom: 10px;\r\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\r\n    font-weight: 500;\r\n    font-size: 20px;\r\n    color: #6b7b96;\r\n  }\r\n  .form-input {\r\n    display: block;\r\n    padding: 5px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    color: #636161;\r\n    outline: none;\r\n  }\r\n  input:focus {\r\n    box-shadow: 1px 1px 2px 0 #12bcb0;\r\n    border: 1px solid #dbd9d9;\r\n  }\r\n  .addBtn {\r\n    margin-top: 20px;\r\n    padding: 5px;\r\n    background-color: transparent;\r\n    border: 2px solid gray;\r\n    border-radius: 5px;\r\n    font-weight: 700;\r\n    background: linear-gradient(45deg, #0b2349 20%, #0d61bc 75%, #8aa9d6);\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    &:hover,\r\n    &:focus {\r\n      box-shadow: 1px 1px 2px 0 #0b2349;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default ContactFormStyled;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = (state) => state.items;\r\nexport const getFilter = (state) => state.filter;\r\nexport const getAllContacts = (state) => state.items;\r\nexport const getLoading = (state) => state.loading;\r\nexport const getError = (state) => state.error;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\n// если возвращает массив или объект нужна мемоизация\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const deleteContactRequest = createAction(\r\n  \"contacts/deleteContactRequest\"\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  \"contacts/deleteContactSuccess\"\r\n);\r\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\nexport const getContactRequest = createAction(\"contacts/getContactRequest\");\r\nexport const getContactSuccess = createAction(\"contacts/getContactSuccess\");\r\nexport const getContactError = createAction(\"contacts/getContactError\");\r\n\r\nconst changeFilter = createAction(\"phoneBook/changeFilter\", (filter) => {\r\n  return {\r\n    payload: filter,\r\n  };\r\n});\r\n\r\nexport default { changeFilter };\r\n","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactError,\r\n  addContactSuccess,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  getContactRequest,\r\n  getContactSuccess,\r\n  getContactError,\r\n} from \"./phoneBookActions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nexport const addContact = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport const fetchContacts = () => (dispatch) => {\r\n  dispatch(getContactRequest());\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(getContactSuccess(data)))\r\n    .catch((error) => dispatch(getContactError(error)));\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport ContactFormStyled from \"./ContactFormStyled\";\r\nimport { getContacts } from \"../../redux/phoneBook/contacts-selectors\";\r\nimport { addContact } from \"../../redux/phoneBook/contacts-operations\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameId = uuidv4();\r\n  phoneId = uuidv4();\r\n\r\n  handelInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handelFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { contacts } = this.props;\r\n    const existContact = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (existContact) {\r\n      return alert(`Contact \"${name}\" already exists`);\r\n    }\r\n    this.props.onSubmit(name, number);\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ContactFormStyled>\r\n        <form className=\"contacts-form\" onSubmit={this.handelFormSubmit}>\r\n          <label className=\"form-label\">\r\n            Name\r\n            <input\r\n              className=\"form-input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Name can only contains letters, apostrophe, dashes and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.\"\r\n              required\r\n              onChange={this.handelInputChange}\r\n              autoComplete=\"off\"\r\n            />\r\n          </label>\r\n          <label className=\"form-label\" id={this.phoneId}>\r\n            Number\r\n            <input\r\n              className=\"form-input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Phone number can only contains digits (min 8 digits), spaces, dashes, parentheses and can start with +\"\r\n              required\r\n              id={this.phoneId}\r\n              onChange={this.handelInputChange}\r\n              autoComplete=\"off\"\r\n            />\r\n          </label>\r\n\r\n          <button className=\"addBtn\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </ContactFormStyled>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapstateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(ContactForm);\r\n","import styled from 'styled-components';\r\n\r\nconst ContactListStyled = styled.ul`\r\n  margin-top: 30px;\r\n  .item {\r\n    &:not(:last-child) {\r\n      margin-bottom: 15px;\r\n    }\r\n  }\r\n  p {\r\n    display: inline-block;\r\n    margin-right: 20px;\r\n  }\r\n  .name {\r\n    color: #052f74;\r\n    font-weight: 600;\r\n    font-size: 20px;\r\n  }\r\n  .number {\r\n    color: #202733;\r\n    font-weight: 600;\r\n    font-size: 17px;\r\n  }\r\n  .delBtn {\r\n    display: block;\r\n    margin-left: auto;\r\n    padding: 5px;\r\n    background: linear-gradient(45deg, #0b2349 20%, #0d61bc 75%, #8aa9d6);\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    border: 2px solid gray;\r\n    border-radius: 5px;\r\n    font-weight: 700;\r\n    &:hover,\r\n    &:focus {\r\n      box-shadow: 1px 1px 3px 0 #fc0202;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default ContactListStyled;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ContactListStyled from \"./ContactListStyled\";\r\nimport { getVisibleContacts } from \"../../redux/phoneBook/contacts-selectors\";\r\nimport {\r\n  deleteContact,\r\n  getContacts,\r\n} from \"../../redux/phoneBook/contacts-operations\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ContactListStyled>\r\n      {contacts.map((contact) => {\r\n        const { id, name, number } = contact;\r\n\r\n        return (\r\n          <li className=\"item\" key={id}>\r\n            <p className=\"name\">{name}:</p>\r\n            <p className=\"number\">{number}</p>\r\n            <button\r\n              className=\"delBtn\"\r\n              type=\"button\"\r\n              onClick={() => onDeleteContact(id)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ContactListStyled>\r\n  );\r\n};\r\n\r\nconst mapstateToProps = (state) => {\r\n  return {\r\n    contacts: getVisibleContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(ContactList);\r\n","import styled from 'styled-components';\r\n\r\nconst FilterStyled = styled.div`\r\n  text-align: center;\r\n  .title {\r\n    color: #6b7b96;\r\n    margin-bottom: 10px;\r\n  }\r\n  .finde-input {\r\n    display: block;\r\n    padding: 5px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    color: #636161;\r\n    outline: none;\r\n  }\r\n  input:focus {\r\n    box-shadow: 1px 1px 2px 0 #12bcb0;\r\n    border: 1px solid #dbd9d9;\r\n  }\r\n`;\r\nexport default FilterStyled;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport FilterStyled from \"./FilterStyled\";\r\nimport contactsActions from \"../../redux/phoneBook/phoneBookActions\";\r\nimport { getFilter } from \"../../redux/phoneBook/contacts-selectors\";\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <FilterStyled>\r\n      <h3 className=\"title\">Finde contacts by name</h3>\r\n      <form>\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={filter}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name can only contains letters, apostrophe, dashes and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan etc.\"\r\n            required\r\n            onChange={onChange}\r\n            className=\"finde-input\"\r\n            autoComplete=\"off\"\r\n          />\r\n        </label>\r\n      </form>\r\n    </FilterStyled>\r\n  );\r\n};\r\n\r\nconst mapstateToProps = (state) => ({\r\n  value: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (event) =>\r\n    dispatch(contactsActions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapstateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport { fetchContacts } from \"./redux/phoneBook/contacts-operations\";\nimport {\n  getContacts,\n  getLoading,\n  getError,\n} from \"./redux/phoneBook/contacts-selectors\";\n\nclass App extends Component {\n  state = {};\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n        {this.props.isLoadingContacts && <h2>Loading...</h2>}\n        {this.props.isError && <h2>Error, try again</h2>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: getContacts(state),\n  isLoadingContacts: getLoading(state),\n  isError: getError(state),\n});\n\nconst mapDispatchToProps = {\n  fetchContacts: fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\r\nimport actions, {\r\n  addContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  deleteContactRequest,\r\n  deleteContactError,\r\n  getContactError,\r\n  getContactSuccess,\r\n  getContactRequest,\r\n} from \"./phoneBookActions\";\r\n\r\nconst items = createReducer([], {\r\n  [getContactSuccess]: (_, action) => action.payload,\r\n  [addContactSuccess]: (state, action) => [action.payload, ...state],\r\n  [deleteContactSuccess]: (state, action) =>\r\n    state.filter(({ id }) => id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [getContactRequest]: () => true,\r\n  [getContactSuccess]: () => false,\r\n  [getContactError]: () => false,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\nconst refreshError = () => null;\r\n\r\nconst error = createReducer(null, {\r\n  [addContactRequest]: refreshError,\r\n  [addContactError]: setError,\r\n  [deleteContactRequest]: refreshError,\r\n  [deleteContactError]: setError,\r\n  [getContactRequest]: refreshError,\r\n  [getContactError]: setError,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import phoneBookReducer from \"./phoneBookReducer\";\r\n\r\nconst rootReducer = phoneBookReducer;\r\n\r\nexport default rootReducer;\r\n\r\n// записываем данные в local storage с помощью persist\r\n\r\n// import { combineReducers } from \"redux\";\r\n// import phoneBookReducer from \"./phoneBookReducer\";\r\n// import { persistReducer } from \"redux-persist\";\r\n// import storage from \"redux-persist/lib/storage\";\r\n\r\n// const configuration = {\r\n//   key: \"contacts\",\r\n//   storage: storage,\r\n//   whitelist: [\"items\", \"filter\"],\r\n// };\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistReducer(configuration, phoneBookReducer),\r\n// });\r\n\r\n// export default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./phoneBook/rootReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  // devTools: process.env.NODE_ENV === 'development',\r\n  // devTools: process.env.NODE_ENV === 'production',\r\n});\r\n\r\nexport default store;\r\n\r\n// persist\r\n// import { configureStore } from \"@reduxjs/toolkit\";\r\n// import { persistStore } from \"redux-persist\";\r\n// import rootReducer from \"./phoneBook/rootReducer\";\r\n// const store = configureStore({\r\n//   reducer: rootReducer,\r\n// });\r\n\r\n// persistStore(store);\r\n\r\n// export default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"modern-normalize/modern-normalize.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport store from \"./redux/store\";\n// import { PersistGate } from 'redux-persist/es/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n//persistor={store.persistor}\n"],"sourceRoot":""}